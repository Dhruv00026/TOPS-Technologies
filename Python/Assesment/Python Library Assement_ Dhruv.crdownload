# -*- coding: utf-8 -*-
"""Dhruv Assesment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LIwkuQL5XaIg-2mPjabUryahZKLIuYxQ

ASSESSMENT 1

1) Import pandas and read in the banklist.csv file into a dataframe called
banks.
"""

import numpy as np
import pandas as pd

banks = pd.read_csv('banklist.csv')

banks

"""2) Show the head of the dataframe."""

bank.head()

"""3) What are the column names?"""

banks

Bank Name
City
ST
CERT
Acquiring Institution
Closing Date
Updated Date

"""4) How many States (ST) are represented in this data set?

"""

states = banks['ST'].nunique()
states

"""5) Get a list or array of all the states in the data set.

"""

states = banks['ST'].unique()
states

"""6) What are the top 5 states with the most failed banks?"""

banks

states = banks.groupby("ST")['Bank Name'].count()
states

top_5_states = states.sort_values(ascending=False).head(5)
top_5_states

"""7) What are the top 5 acquiring institutions?

"""

banks = banks.groupby("Acquiring Institution")['Bank Name'].count()
top_5_acquiring = banks.sort_values(ascending=False).head(5)
top_5_acquiring

"""8) How many banks has the State Bank of Texas acquired? How many of
them were actually in Texas?

"""

banks = pd.read_csv('banklist.csv')
state_bank_of_texas_acquisitions = banks[banks['Acquiring Institution'] == 'State Bank of Texas']
total_acquisitions = len(state_bank_of_texas_acquisitions)
texas_acquisitions = state_bank_of_texas_acquisitions[state_bank_of_texas_acquisitions['ST'] == 'TX']
texas_acquisitions_count = len(texas_acquisitions)
print(f"Total banks acquired by State Bank of Texas: {total_acquisitions}")
print(f"Banks acquired in Texas by State Bank of Texas: {texas_acquisitions_count}")

"""9) What is the most common city in California for a bank to fail in?"""

banks = banks[banks['ST'] == 'CA']
cities = banks.groupby('City')['Bank Name'].count()
most_common_city = cities.idxmax()
print(f"The most common city in California for a bank to fail in is: {most_common_city}")

"""Assessment 2:

Q 1: Develop a Line chart using the functionality of pandas to show how
automobile sales fluctuate from year to year.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

sales = pd.read_csv('historical_automobile_sales.csv')
sales

yearly_sales = sales.groupby('Year')['Automobile_Sales'].sum()
yearly_sales.plot(kind='line', figsize=(10, 6))
plt.title('Automobile Sales by Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.show()

"""Q 2: Plot different lines for categories of vehicle type and analyze the trend
to answer the question Is there a noticeable difference in sales trends
between different vehicle types during recession periods?

"""

recession_periods = sales[(sales['Year'] >= 2008) & (sales['Year'] <= 2009) | (sales['Year'] == 2020)]
vechicle_sales = recession_periods.groupby('Vehicle_Type')['Automobile_Sales'].sum()
fig, ax = plt.subplots(figsize=(10, 6))
vechicle_sales.plot(kind='line', ax=ax)
ax.set_title('Recession Period Sales by Vehicle Type')
ax.set_xlabel('Vehicle Type')
ax.set_ylabel('Total Sales')
plt.show()
vechicle_sales.plot(kind='line', ax=ax)
ax.set_title('Recession Period Sales by Vehicle Type')
ax.set_xlabel('Vehicle Type')
ax.set_ylabel('Total Sales')
plt.show()

"""Q 3: Use the functionality of Seaborn Library to create a visualization to compare
the sales trend per vehicle type for a recession period with a non- recession
period.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

recession_periods = sales[(sales['Year'] >= 2008) & (sales['Year'] <= 2009) | (sales['Year'] == 2020)]
non_recession_periods = sales[~sales['Year'].isin(recession_periods['Year'])]
plt.figure(figsize=(10, 6))
sns.lineplot(data=recession_periods, x='Year', y='Automobile_Sales', hue='Vehicle_Type')
sns.lineplot(data=non_recession_periods, x='Year', y='Automobile_Sales', hue='Vehicle_Type')
plt.title('Sales Trend per Vehicle Type (Recession vs Non-Recession Periods)')
plt.xlabel('Vehicle Type')
plt.ylabel('Total Sales')
plt.legend(labels=["Recession Period", "Non-Recession Period"])
plt.show()

"""Q 4: Now you want to compare the sales of different vehicle types
during a recession and a non-recession period
"""

recession_years = [2008, 2009, 2020]
recession_data = sales[sales['Year'].isin(recession_years)]
non_recession_data = sales[~sales['Year'].isin(recession_years)]
plt.figure(figsize=(10, 6))
sns.barplot(x='Vehicle_Type', y='Automobile_Sales', hue='Recession', data=pd.concat([
    recession_data.assign(Recession='Recession'),
    non_recession_data.assign(Recession='Non-Recession')
]))
plt.title('Vehicle Type Sales During Recession vs. Non-Recession')
plt.xlabel('Vehicle Type')
plt.ylabel('Average Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

